#----------------------------------------------------------------------------#
# Imports
#----------------------------------------------------------------------------#

import json
import babel
import logging
import dateutil.parser
from datetime import datetime
from flask import Flask, render_template, request, Response, flash, redirect, url_for, jsonify, abort
from flask_moment import Moment
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate # Imported Migrate from flask_migrate.
import sys
from logging import Formatter, FileHandler
from flask_wtf import Form
from forms import *

#----------------------------------------------------------------------------#
# App Config.
#----------------------------------------------------------------------------#
app = Flask(__name__)
moment = Moment(app)
app.config.from_object('config')
db = SQLAlchemy(app)
migrate = Migrate(app, db)

# TODO: connect to a local postgresql database
SQLALCHEMY_DATABASE_URI = 'postgresql://postgres:zeddy.emy@localhost:5432/fyyur'
# DONE: I connected to local postgres db in config.py


#----------------------------------------------------------------------------#
# Models.
#----------------------------------------------------------------------------#
class Venue(db.Model):
    __tablename__ = 'venues'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String)
    city = db.Column(db.String(120))
    state = db.Column(db.String(120))
    address = db.Column(db.String(120))
    phone = db.Column(db.String(120))
    genres = db.Column(db.String(120)) # < genres = db.Column(db.PickleType, nullable=True) > 
    facebook_link = db.Column(db.String(120))
    image_link = db.Column(db.String(500))
    website_link = db.Column(db.String(120))
    looking_for_talent = db.Column(db.Boolean, nullable=True, default=False)
    description  = db.Column(db.String(200))
    shows = db.relationship("Show", backref="venues", lazy=False)

    def __repr__(self):
        return f'<Venue ID: {self.id}, name: {self.name}, genres: {self.genres}, city: {self.city}>'

    # TODO: implement any missing fields, as a database migration using Flask-Migrate
    # DONE.

class Artist(db.Model):
    __tablename__ = 'artists'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String)
    city = db.Column(db.String(120))
    state = db.Column(db.String(120))
    phone = db.Column(db.String(120))
    genres = db.Column(db.String(120)) # < genres = db.Column(db.PickleType, nullable=True) > 
    facebook_link = db.Column(db.String(120))
    image_link = db.Column(db.String(500))
    website_link = db.Column(db.String(120))
    looking_for_venues = db.Column(db.Boolean, nullable=True, default=False)
    description  = db.Column(db.String(200))
    shows = db.relationship("Show", backref="artists", lazy=False)

    def __repr__(self):
        return f'<Artist ID: {self.id}, name: {self.name}, show: {self.show}>'

    # TODO: implement any missing fields, as a database migration using Flask-Migrate
    # DONE.

# TODO Implement Show and Artist models, and complete all model relationships and properties, as a database migration.
class Show(db.Model):
	__tablename__ = "Show"
	id = db.Column(db.Integer, primary_key=True)
	artist_id = db.Column(db.Integer, db.ForeignKey('artists.id', ondelete='CASCADE'), nullable=False,)
	venue_id = db.Column(db.Integer, db.ForeignKey('venues.id', ondelete='CASCADE'), nullable=False,)
	start_time = db.Column(db.DateTime, nullable=False)

	

	def __repr__(self):
		return f'<Show id: {self.id}, artist_id: {self.artist_id}, venue_id: {self.venue_id}'

#----------------------------------------------------------------------------#
# Filters.
#----------------------------------------------------------------------------#

def format_datetime(value, format='medium'):
	date = dateutil.parser.parse(value)
	if format == 'full':
		format="EEEE MMMM, d, y 'at' h:mma"
	elif format == 'medium':
		format="EE MM, dd, y h:mma"
	return babel.dates.format_datetime(date, format, locale='en')

app.jinja_env.filters['datetime'] = format_datetime

#----------------------------------------------------------------------------#
# Controllers.
#----------------------------------------------------------------------------#

@app.route('/')
def index():
	return render_template('pages/home.html')


#  ----------------------------------------------------------------
#  Venues
#  ----------------------------------------------------------------
@app.route('/venues')
def venues():
	# TODO: replace with real venues data.
	#       num_upcoming_shows should be aggregated based on number of upcoming shows per venue.
	results = Venue.query.order_by(Venue.state, Venue.city).all()
	data = []
	
	for result in results:
		city_state_unit = {
			"city": result.city,
			"state": result.state
			}
		
		venues = Venue.query.filter_by(city=result.city, state=result.state).all()
		
		# format each venue
		formatted_venues = []
		for venue in venues:
			formatted_venues.append({
				"id": venue.id,
				"name": venue.name,
				"num_upcoming_shows": len(list(filter(lambda x: x.start_time > datetime.now(), venue.shows)))
			})
			
		city_state_unit["venues"] = formatted_venues
		data.append(city_state_unit)
		
	return render_template('pages/venues.html', areas=data)

@app.route('/venues/search', methods=['POST'])
def search_venues():
	# TODO: implement search on venues with partial string search. Ensure it is case-insensitive.
	# search for Hop should return "The Musical Hop".
	# search for "Music" should return "The Musical Hop" and "Park Square Live Music & Coffee"
	search_term = request.form.get('search_term', '')
	
	response = {}
	venues = list(Venue.query.filter(
		Venue.name.ilike(f"%{search_term}%") |
		Venue.state.ilike(f"%{search_term}%") |
		Venue.city.ilike(f"%{search_term}%") 
	).all())
	response["count"] = len(venues)
	response["data"] = []
	
	for venue in venues:
		venue_unit = {
			"id": venue.id,
			"name": venue.name,
			"num_upcoming_shows": len(list(filter(lambda x: x.start_time > datetime.now(), venue.shows)))
		}
		response["data"].append(venue_unit)
		
	return render_template('pages/search_venues.html', results=response, search_term=search_term)

@app.route('/venues/<int:venue_id>')
def show_venue(venue_id):
	# shows the venue page with the given venue_id
	# TODO: replace with real venue data from the venues table, using venue_id
	data_venue = Venue.query.filter(Venue.id == venue_id).first()
	upcoming_shows = Show.query.filter(Show.venue_id == venue_id).filter(Show.start_time > datetime.now()).all()
	
	if len(upcoming_shows) > 0:
		data_upcoming_shows = []
		
		for upcoming_show in upcoming_shows:
			artist = Artist.query.filter(Artist.id == upcoming_show.artist_id).first()
			data_upcoming_shows.append({
				'artist_id': artist.id,
				'artist_name': artist.name,
				'artist_image_link': artist.image_link,
				'start_time': str(upcoming_show.start_time),
			})
			
		# shows data
		data_venue.upcoming_shows = data_upcoming_shows
		data_venue.upcoming_shows_count = len(data_upcoming_shows)
		
	past_shows = Show.query.filter(Show.venue_id == venue_id).filter(Show.start_time < datetime.now()).all()
	
	if len(past_shows) > 0:
		data_past_shows = []
		for past_show in past_shows:
			artist = Artist.query.filter(Artist.id == past_show.artist_id).first()
			
			# Map past shows
			data_past_shows.append({
				'artist_id': artist.id,
				'artist_name': artist.name,
				'artist_image_link': artist.image_link,
				'start_time': str(past_show.start_time),
			})
		
		data_venue.past_shows = data_past_shows
		data_venue.past_shows_count = len(data_past_shows)
		
	return render_template('pages/show_venue.html', venue=data_venue)

#  Create Venue
#  ----------------------------------------------------------------
@app.route('/venues/create', methods=['GET'])
def create_venue_form():
	form = VenueForm()
	return render_template('forms/new_venue.html', form=form)

@app.route('/venues/create', methods=['POST'])
def create_venue_submission():
	# TODO: insert form data as a new Venue record in the db, instead
	# TODO: modify data to be the data object returned from db insertion
	error = False
	form = VenueForm(request.form)
	body = {}
	try:
		# get form data
		name = form.name.data
		city = form.city.data
		state = form.state.data
		address = form.address.data
		phone = form.phone.data
		genres = ",".join(form.genres.data)
		facebook_link = form.facebook_link.data
		image_link = form.image_link.data
		website_link = form.website_link.data
		seeking_talent = form.seeking_talent.data
		description = form.seeking_description.data

		aVenue = Venue(name=name, city=city, state=state, address=address, phone=phone, genres=genres, facebook_link=facebook_link, image_link=image_link, website_link=website_link, looking_for_talent=seeking_talent, description=description)
		db.session.add(aVenue)
		db.session.commit()
	except:
		error = True
		db.session.rollback()
	finally:
		db.session.close()
	if error:
		# TODO: on unsuccessful db insert, flash an error instead.
		flash('An error occurred. Venue ' + request.form['name'] + ' could not be listed.')
		# see: http://flask.pocoo.org/docs/1.0/patterns/flashing/
		abort(500)
	else:
		# on successful db insert, flash success
		flash('Venue ' + request.form['name'] + ' was successfully listed!')

	return render_template('pages/home.html')

@app.route('/venues/<venue_id>', methods=['DELETE'])
def delete_venue(venue_id):
	# TODO: Complete this endpoint for taking a venue_id, and using
	# SQLAlchemy ORM to delete a record. Handle cases where the session commit could fail.
	error = False
	try:
		venue = Venue.query.get(venue_id)
		db.session.delete(venue)
		db.session.commit()
	except:
		error = True
		db.session.rollback()
	finally:
		db.session.close()
	if error:
		# on unsuccessful delete, flash an error
		flash("Venue was not deleted successfully.")
	else:
		# on successful delete, flash success
		flash("Venue " + venue.name + " was deleted successfully!")

	# BONUS CHALLENGE: Implement a button to delete a Venue on a Venue Page, have it so that
	# clicking that button delete it from the db then redirect the user to the homepage
	return render_template('pages/home.html')

#  ----------------------------------------------------------------
#  Artists
#  ----------------------------------------------------------------
@app.route('/artists')
def artists():
	# TODO: replace with real data returned from querying the database
	artists = db.session.query(Artist.id, Artist.name).order_by('id').all()
	return render_template('pages/artists.html', artists=artists)

@app.route('/artists/search', methods=['POST'])
def search_artists():
	# TODO: implement search on artists with partial string search. Ensure it is case-insensitive.
	# search for "A" should return "Guns N Petals", "Matt Quevado", and "The Wild Sax Band".
	# search for "band" should return "The Wild Sax Band".
	search_term = request.form.get('search_term', '')
	
	response = {}
	artists = Artist.query.filter(
		Artist.name.ilike(f"%{search_term}%") |
		Artist.state.ilike(f"%{search_term}%") |
		Artist.city.ilike(f"%{search_term}%")
	).all()
	response["count"] = len(artists)
	response["data"] = []
	
	for artist in artists:
		temp = {
			"name": artist.name,
			"id": artist.id
		}
		
		upcoming_shows = 0
		for show in artist.shows:
			if show.start_time > datetime.now():
				upcoming_shows = upcoming_shows + 1
		temp["upcoming_shows"] = upcoming_shows
		
		response["data"].append(temp)
	
	return render_template('pages/search_artists.html', results=response, search_term=search_term)

@app.route('/artists/<int:artist_id>')
def show_artist(artist_id):
	# shows the artist page with the given artist_id
	# TODO: replace with real artist data from the artist table, using artist_id
	data_artist = Artist.query.filter(Artist.id == artist_id).first()
	upcoming_shows = Show.query.filter(Show.artist_id == artist_id).filter(Show.start_time > datetime.now()).all()

	if len(upcoming_shows) > 0:
		data_upcoming_shows = []
		
		for upcoming_show in upcoming_shows:
			venue = Venue.query.filter(Venue.id == upcoming_show.venue_id).first()
			data_upcoming_shows.append({
				'venue_id': venue.id,
				'venue_name': venue.name,
				'venue_image_link': venue.image_link,
				'start_time': str(upcoming_show.start_time),
			})
		
		data_artist.upcoming_shows = data_upcoming_shows
		data_artist.upcoming_shows_count = len(data_upcoming_shows)
		
	past_shows = Show.query.filter(Show.artist_id == artist_id).filter(Show.start_time < datetime.now()).all()

	if len(past_shows) > 0:
		data_past_shows = []
		for past_show in past_shows:
			venue = Venue.query.filter(Venue.id == upcoming_show.venue_id).first()
			data_past_shows.append({
				'venue_id': venue.id,
				'venue_name': venue.name,
				'venue_image_link': venue.image_link,
				'start_time': str(past_show.start_time),
			})
		
		data_artist.past_shows = data_past_shows
		data_artist.past_shows_count = len(data_past_shows)
	

	return render_template('pages/show_artist.html', artist=data_artist)

#  ----------------------------------------------------------------
#  Update
#  ----------------------------------------------------------------
@app.route('/artists/<int:artist_id>/edit', methods=['GET'])
def edit_artist(artist_id):
	form = ArtistForm()
	artist = Artist.query.filter(Artist.id == artist_id).first()

	form.name.data = artist.name
	form.city.data = artist.city
	form.state.data = artist.state
	form.phone.data = artist.phone
	form.genres.data = artist.genres
	form.facebook_link.data = artist.facebook_link
	form.image_link.data = artist.image_link
	form.website_link.data = artist.website_link
	form.seeking_venue.data = artist.looking_for_venues
	form.seeking_description.data = artist.description
	
	# TODO: populate form with fields from artist with ID <artist_id>
	return render_template('forms/edit_artist.html', form=form, artist=artist)

@app.route('/artists/<int:artist_id>/edit', methods=['POST'])
def edit_artist_submission(artist_id):
	# TODO: take values from the form submitted, and update existing
	# artist record with ID <artist_id> using the new attributes
	error = False
	
	try:
		# get form data
		name = request.form['name']
		city = request.form['city']
		state = request.form['state']
		phone = request.form['phone']
		genres = request.form.getlist('genres')
		facebook_link = request.form['facebook_link']
		image_link = request.form['image_link']
		website_link = request.form['website_link']
		seeking_venue = True if 'seeking_venue' in request.form else False
		description = request.form['seeking_description']
		
		updateArtist = Artist.query.get(artist_id)
		
		updateArtist.name = name
		updateArtist.city = city
		updateArtist.state = state
		updateArtist.phone = phone
		updateArtist.genres = genres
		updateArtist.facebook_link = facebook_link
		updateArtist.image_link = image_link
		updateArtist.website_link = website_link
		updateArtist.looking_for_venues = seeking_venue
		updateArtist.description = description
		
		db.session.commit()
	except:
		error = True
		db.session.rollback()
	finally:
		db.session.close()
	if error:
		flash('Oops! An error occurred. Artist ' + name + ' could not be Edited.')
		abort(500)
	else:
		flash('Artist ' + name + ' was successfully Edited!')
	
	return redirect(url_for('show_artist', artist_id=artist_id))

@app.route('/venues/<int:venue_id>/edit', methods=['GET'])
def edit_venue(venue_id):
	form = VenueForm()
	venue = Venue.query.filter(Venue.id == venue_id).first()
	
	form.name.data = venue.name
	form.city.data = venue.city
	form.state.data = venue.state
	form.address.data = venue.address
	form.phone.data = venue.phone
	form.genres.data = venue.genres
	form.facebook_link.data = venue.facebook_link
	form.image_link.data = venue.image_link
	form.website_link.data = venue.website_link
	form.seeking_talent.data = venue.looking_for_talent
	form.seeking_description.data = venue.description
	
	# TODO: populate form with values from venue with ID <venue_id>
	return render_template('forms/edit_venue.html', form=form, venue=venue)

@app.route('/venues/<int:venue_id>/edit', methods=['POST'])
def edit_venue_submission(venue_id):
	# TODO: take values from the form submitted, and update existing
	# venue record with ID <venue_id> using the new attributes
	error = False

	try:
		# get form data
		name = request.form['name']
		city = request.form['city']
		state = request.form['state']
		address = request.form['address']
		phone = request.form['phone']
		genres = request.form.getlist('genres')
		facebook_link = request.form['facebook_link']
		image_link = request.form['image_link']
		website_link = request.form['website_link']
		seeking_talent = True if 'seeking_talent' in request.form else False
		description = request.form['seeking_description']
		
		updateVenue = Venue.query.get(venue_id)

		updateVenue.name = name
		updateVenue.city = city
		updateVenue.state = state
		updateVenue.address = address
		updateVenue.phone = phone
		updateVenue.genres = genres
		updateVenue.facebook_link = facebook_link
		updateVenue.image_link = image_link
		updateVenue.website_link = website_link
		updateVenue.looking_for_talent = seeking_talent
		updateVenue.description = description
		
		db.session.commit()
	except:
		error = True
		db.session.rollback()
	finally:
		db.session.close()
	if error:
		flash('Oops! An error occurred. Venue ' + name + ' could not be Edited.')
		abort(500)
	else:
		flash('Venue ' + name + ' was successfully Edited!')
	
	
	return redirect(url_for('show_venue', venue_id=venue_id))

#  ----------------------------------------------------------------
#  Create Artist
#  ----------------------------------------------------------------
@app.route('/artists/create', methods=['GET'])
def create_artist_form():
	form = ArtistForm()
	return render_template('forms/new_artist.html', form=form)

@app.route('/artists/create', methods=['POST'])
def create_artist_submission():
	# called upon submitting the new artist listing form
	# TODO: insert form data as a new Venue record in the db, instead
	# TODO: modify data to be the data object returned from db insertion
	error = False
	form = ArtistForm(request.form)
	body = {}
	try:
		# get form data
		name = form.name.data
		city = form.city.data
		state = form.state.data
		phone = form.phone.data
		genres = ",".join(form.genres.data)
		facebook_link = form.facebook_link.data
		image_link = form.image_link.data
		website_link = form.website_link.data
		seeking_venue = form.seeking_venue.data
		description = form.seeking_description.data

		anArtist = Artist(name=name, city=city, state=state, phone=phone, genres=genres, facebook_link=facebook_link, image_link=image_link, website_link=website_link, looking_for_venues=seeking_venue, description=description)
		db.session.add(anArtist)
		db.session.commit()
	except:
		error = True
		db.session.rollback()
	finally:
		db.session.close()
	if error:
		# TODO: on unsuccessful db insert, flash an error instead.
		flash('An error occurred. Artist ' + request.form['name'] + ' could not be listed.')
		# see: http://flask.pocoo.org/docs/1.0/patterns/flashing/
		abort(500)
		print(sys.exc_info())
	else:
		# on successful db insert, flash success
		flash('Artist ' + request.form['name'] + ' was successfully listed!')
	
	return render_template('pages/home.html')


#  ----------------------------------------------------------------
#  Shows
#  ----------------------------------------------------------------
@app.route('/shows')
def shows():
	# displays list of shows at /shows
	# TODO: replace with real venues data.
	data = []
	
	shows = Show.query.all()
	for show in shows:
		temp = {}
		temp["venue_id"] = show.venues.id
		temp["venue_name"] = show.venues.name
		temp["artist_id"] = show.artists.id
		temp["artist_name"] = show.artists.name
		temp["artist_image_link"] = show.artists.image_link
		temp["start_time"] = show.start_time.strftime("%m/%d/%Y, %H:%M:%S")
		
		data.append(temp)
	
	return render_template('pages/shows.html', shows=data)

@app.route('/shows/create')
def create_shows():
	# renders form. do not touch.
	form = ShowForm()
	return render_template('forms/new_show.html', form=form)

@app.route('/shows/create', methods=['POST'])
def create_show_submission():
	# called to create new shows in the db, upon submitting new show listing form
	# TODO: insert form data as a new Show record in the db, instead
	error = False
	form = ShowForm(request.form)
	body = {}
	try:
		# get form data
		artist_id = request.form['artist_id']
		venue_id = request.form['venue_id']
		start_time = request.form['start_time']

		aShow = Show(artist_id=artist_id, venue_id=venue_id, start_time=start_time)
		db.session.add(aShow)
		db.session.commit()
	except:
		error = True
		db.session.rollback()
	finally:
		db.session.close()
	if error:
		# TODO: on unsuccessful db insert, flash an error instead.
		flash('An error occurred. Show could not be listed.')
		# see: http://flask.pocoo.org/docs/1.0/patterns/flashing/
		abort(500)
	else:
		# on successful db insert, flash success
		flash('The Show was successfully listed!')
	
	return render_template('pages/home.html')

@app.errorhandler(404)
def not_found_error(error):
    return render_template('errors/404.html'), 404

@app.errorhandler(500)
def server_error(error):
    return render_template('errors/500.html'), 500


if not app.debug:
    file_handler = FileHandler('error.log')
    file_handler.setFormatter(
        Formatter('%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]')
    )
    app.logger.setLevel(logging.INFO)
    file_handler.setLevel(logging.INFO)
    app.logger.addHandler(file_handler)
    app.logger.info('errors')

#----------------------------------------------------------------------------#
# Launch.
#----------------------------------------------------------------------------#

# Default port:
if __name__ == '__main__':
    app.debug = True
    app.run(host="0.0.0.0")

# Or specify port manually:
'''
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
'''
